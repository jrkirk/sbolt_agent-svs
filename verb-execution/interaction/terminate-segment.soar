### terminate an open segment on the interaction stack if the purpose of the segment is satisfied


### the segment was originated by the agent and a dialog-event was expected from the instructor

sp {propose*pop-segment*agent
   (state <s> ^interaction.stack.segment <segment>
              ^instructor-message <m>)
   (<segment> ^purpose.satisfaction <sat>
   	      ^originator agent)
   (<sat> ^dialog-event.type <etype>)
   (<m> ^type <etype>)
-->
   (<s> ^operator <op> +)
   (<op> ^name pop-segment
   	 ^segment <segment>
	 ^category interaction-stack)
}


### the segment was originated by the instructor and an action-event/learning-event was expected from the agent

# AM: Now there is an event substrcture that must be fully satisfied in the performed structure
sp {propose*pop-segment*satisfaction*performed
   (state <s> ^interaction.stack.segment <segment>
   	      	  ^status.performed <performed>)
   (<segment> ^purpose.satisfaction <sat>)
   (<sat> ^<event> <sat-event>)
   (<sat-event> ^type <event-type>)
   (<performed> ^<event> <status-event>)
   (<status-event> ^type <event-type>)
   # Everything listed in the satisfaction is on the status
   -{(<sat-event> ^{<att> <> info} <val>)
     (<status-event> -^<att> <val>)}
-->
   (<s> ^operator <op> +)
   (<op> ^name pop-segment
   	 ^segment <segment>
	 ^category interaction-stack)
}


# AM: Is there a reason these are two separate rules instead of just ignoring the originator? (rewritten above)
#sp {propose*pop-segment*instructor
#   (state <s> ^interaction.stack.segment <segment>
#   	      ^status.performed.<etype> <info>)
#   (<segment> ^purpose.satisfaction <sat>
#   	      ^originator instructor)
#   (<sat> ^<etype> <info>)
#   -{
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name pop-segment
#   	 ^segment <segment>
#	 ^category interaction-stack)
#}
#
#sp {propose*pop-segment*internal
#   (state <s> ^interaction.stack.segment <segment>
#   	      ^status.performed.<etype> <info>)
#   (<segment> ^purpose.satisfaction <sat>
#              ^originator agent)
#   (<sat> ^<etype> <info>)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name pop-segment
#   	 ^segment <segment>
#	 ^category interaction-stack)
#}

# AM: This rule is similar to the one above, if the next segment is also satisfied
#		The operator is marked so that the status sticks around
sp {elaborate*pop-segment*next-is-satisfied
   (state <s> ^interaction.stack.segment.next <next>
   	      	  ^status.performed <performed>
             ^operator <o> +)
   (<next> ^purpose.satisfaction <sat>)
   # The status and satisfaction match on both event and type
   (<sat> ^<event> <sat-event>)
   (<sat-event> ^type <event-type>)
   (<performed> ^<event> <status-event>)
   (<status-event> ^type <event-type>)
   # Everything listed in the satisfaction is on the status
   -{(<sat-event> ^{<att> <> info} <val>)
     (<status-event> -^<att> <val>)}
	(<o> ^name pop-segment)
-->
   (<o> ^next-is-satisfied true)
}


#### #SM delete the status only if the next segment does not have the same satisfaction.
### pop all segments that have the same satisfaction
# AM: Now uses the next-is-satisfied flag to decide when to clear a status
sp {apply*pop-segment*instructor*clear
   (state <s> ^status <status>
   	      ^operator <o>)
   (<o> ^name pop-segment
       -^next-is-satisfied true)
-->
   (<s> ^status <status> -
   	^status <new-status>)
}
* Terminology
** Interaction stack
The stack maintains the context of interaction between the agent and
the instructor. Both the agent and instructor can introduce new
'topics' in to the interaction. 
** Events
An event is anything that changes the state of the environment,
interaction or agent's knowledge. Following events are pertinents to
this project.
*** action
an action event can be an =external-action=: the agent causes the
environment to change, or an =internal-action=: the agent causes the
hypothetical/imagined/simulated state to change.

*** dialog
a dialog event causes the state of the interaction to change. Dialog
events are described in the MIISI document.

*** learning
a learning event changes the knowledge of the agent. It can belong to
following categories.
**** verb
- explanation: learn a new action by chunking
**** object
- attribute-category: learn a the category of an attribute word; example: red
  is a color.
- object-attribute: learn an attribute for an object
- ie-mapping: learn a mapping between an internal and external
  attribute

** Segment
A segment is a set of events that have a common purpose. The
interaction stack maintains all the 'open' segments, ie, the segments
whose purpose has not been satisfied yet. 

A segment is defined by the following fields. 

*** Purpose
Purpose of segments are defined by the following fields.
**** Type
A purpose can be of following types. 
***** Instructor purpose
- execute-action
- gather-information
***** Agent purpose
- gather-information
**** Satisfaction
An open segment on the interaction stack generates a set of events
that should occur for the purpose of that segment to be satisfied,
thereby ending the segment and removing it from the interaction stack.

*** Expectation
An open segment generates a set of expected events. If an event occurs
that is not in the set of expectations, it is considered an
interrupting event and handled accordingly. (It is related to
sub-segments in collaborative discourse theory, needs further experimentation)

* Integration with Language system
The integration is through an augmentation: =nl= at the
topstate. =nl.input-link.message= points to the parse of the message
provided by the instructor. It is written-to by the natural language
system (nl.soar+java package in the simulator implements a psuedo-nl
system) and read and deleted by the interaction
system. =nl.output-link.message= is written-to by the interaction
system and read/deleted by the nl system. 




# ask-query
#   ask-query is proposed for each query
#		then each operator is elaborated with the structure that should go on the output link
#	Preferences determine which queries are better than others
#	When an ask-query operator is chosen, it adds the query structure to the output link 
#		and creates a current structure on the queries id

sp {propose*ask-query
   (state <s> ^superstate nil
              ^queries.query <q>
             ^interaction.stack.segment <seg>)
   (<q> ^segment <seg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name ask-query
        ^category object-processing
        ^query <q>
        ^fields <f>)
}

sp {apply*ask-query*create-status
   (state <s> ^status <status>
              ^operator <o>)
   (<o> ^name ask-query
        ^query <q>
        ^type <type>
        ^expected-response <response-type>
        ^fields <f>)
-->
   (<status> ^type object-question
             ^state-name topstate
             ^purpose <p>)
   (<p> ^type <type>
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^message <msg>
             ^query <q>)
   (<sat> ^dialog-event <response-type>)
   (<msg> ^type <type>
          ^originator agent
          ^fields <f>)
   (<q> ^active true
        ^expected-response <response-type>)
}

sp {apply*pop-segment*copy*query*to*instructor-message
   (state <s> ^topstate <s> 
              ^operator.name pop-segment
              ^interaction.stack.segment <seg>
              ^instructor-message <msg>)
   (<seg> ^purpose.parameters.query <q>
          ^next <next-seg>)
   (<q> ^expected-response <response-type>
        ^active true
        ^segment <next-seg>)
   (<msg> ^type <response-type>)
-->
   (<msg> ^query <q>)
}


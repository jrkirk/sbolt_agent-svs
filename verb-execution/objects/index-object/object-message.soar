# After the user has asked a which-question, these rules handle possible responses from the user
#   this-object-message with 'this' specifier: you can just use the pointed-to object as the candidate 
#   this-object-message with DEF specifier: add words to the object's description


# Results when answered with an this-object-message with a 'this' used
sp {this-object-message*apply*complete-this-object-message*resolve*which-question
   (state <s> ^name this-object-message
              ^operator.name complete-this-object-message
              ^topstate.interaction.stack.segment <seg>
              ^this-object <obj>)
   (<seg> ^context <context>)
   (<context> ^cause which-question
              ^object <context-obj>)
-->
   (<context-obj> ^candidate <obj>)
}

# Results when an object-message with a relation is sent in response to a which-question
sp {segment*purpose*propose*index-object
   (state <s> ^topstate <s>
             -^instructor-message <msg>
              ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>
          ^originator instructor)
   (<p> ^type index-object
        ^parameters.context.cause which-question)
-->
   (<s> ^operator <o> +)
   (<o> ^name index-object
        ^return-all true
        ^use-interaction true
        ^allow-ties false
        ^category object-processing)
}

sp {index-object*purpose*elaborate*relation
   (state <s> ^operator <o> +
              ^interaction.stack.segment.purpose <p>)
   (<o> ^name index-object)
   (<p> ^type index-object
        ^parameters.context.cause which-question
        ^parameters.relation <rel>)
   (<rel> ^object1 <obj1>
          ^object2 <obj2>)
-->
   (<o> ^object <obj1>
        ^object <obj2>
        ^relation <rel>)
}


sp {index-object*purpose*apply*perform*indexing
   (state <s> ^operator <o>
              ^interaction.stack.segment.purpose <p>
              ^status <status>)
   (<p> ^type index-object
        ^parameters.context.cause which-question)
   (<o> ^name index-object
        ^finished true)
-->
   (<status> ^performed.internal-event indexing)
}

sp {index-object*purpose*apply*failure*send-message
   (state <s> ^operator <o>
              ^io.output-link <out>
              ^interaction.stack.segment.purpose <p>)
   (<p> ^type index-object
        ^parameters.context.cause which-question)
   (<o> ^name index-object
        ^match failure)
-->
   (<out> ^send-message <msg>)
   (<msg> ^type no-object
          ^fields <f>)
}

sp {index-object*purpose*apply*add*candidate
   (state <s> ^operator <o>
              ^io.output-link <out>
              ^interaction.stack.segment.purpose <p>)
   (<o> ^name index-object
        ^match {<m> <> failure})
   (<p> ^type index-object
        ^parameters.context <context>)
   (<context> ^cause which-question
        		^object <obj>)
        
-->
   (<obj> ^candidate <m>)
}



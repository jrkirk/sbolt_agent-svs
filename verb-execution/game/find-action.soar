#load all structures related to game into working memory
sp {find-action*propose*lookup-game
   (state <s> ^name find-action
             -^game
              ^game-name <game>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-game
        ^category svs # for now determine better or new category
        ^game-name <game>)
}

#TODO for now only handle world objects as parameters
sp {find-action*build-action-options
   (state <s> ^name find-action
              ^game.actions.action <a>
#              ^game.facts.equivalences <eq>
              ^topstate.<thing> <o>
              ^game-name <game>)
   (<a> ^parameters <p>)
   (<p> ^<arg>.{<param> <> type} <pa> ^<arg>.type.world.<thing> <atr>)
#   (<eq> ^equivalence <eq1>)
#   (<eq1> ^a.parameter <param>
#          ^b.world <thing>)
   (<o> ^<atr> <param>)
-->
   (<p> ^option.<arg> <o>)
}

sp {find-action*propose*complete-find-action
   (state <s> ^name find-action
              ^game.actions.action <a>)
   (<a> ^parameters <p>)
   (<p> ^option.<arg> <o>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete-find-action
        ^category svs
        ^action <a>)
}

sp {find-action*apply*complete-find-action
   (state <s> ^name find-action
              ^operator <o>
              ^superstate <ss>
              ^game.actions.action <a>)
   (<o> ^name complete-find-action
        ^action <a>)
-->
   (<ss> ^action <a>)
}



#check-legality of action TODO
#sp {find-action*find-legal-actions
#   (state <s> ^name find-action
#              ^game.actions.action <a>
#              ^game.facts.equivalences <eq>
#              ^topstate.prepositions <prep>
#              ^game-name <game>)
#   (<a> ^parameters.option.<arg> <o>)
#   (<a> ^conditions <c>)
#   (<c> ^<arg>.{<param> <> type} <pa> ^<arg>.type.world.<thing> <atr>)
#   (<eq> ^equivalence <eq1>)
#   (<eq1> ^a.parameter <param>
#          ^b.world <thing>)
#   (<prep> ^<atr> <param>)
#-->
#   (<p> ^option.<arg> <o>)
#}




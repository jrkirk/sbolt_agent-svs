#load all structures related to game into working memory
#sp {find-action*propose*lookup-game
#   (state <s> ^name find-action
#             -^game
#              ^game-name <game>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name lookup-game
#        ^category svs # for now determine better or new category
#        ^game-name <game>)
#}

#TODO for now only handle world objects as parameters
#sp {find-action*build-action-options
#   (state <s> ^name find-action
#              ^game.actions.action <a>
#              ^topstate.<thing> <obj>
#              ^game-name <game>)
#   (<a> ^parameters <p>)
#   (<p> ^<arg>.{<param> <> type} <pa> ^<arg>.type.world.<thing> <atr>)
#   (<obj> ^<atr> <param>)
#-->
#   (<s> ^option.<arg> <obj>)
#}

sp {find-action*propose*lookup-preposition
   (state <s> ^name find-action
             -^found-prep
              ^game.actions.action <a>)
   (<a> ^parameters <p> ^conditions <c>)
   (<c> ^<arg> <conda>)
   (<conda> ^prep <prep>)
   (<prep> ^name in ^a this)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-preposition
        ^category svs
        ^type in)
}

sp {find-action*propose*find-parameter
   (state <s> ^name find-action
#              ^found-prep <fprep>
             -^valid-arg.<arg> <something>
              ^game.actions.action <a>)
   (<a> ^parameters <p> ^conditions <c>)
   (<p> ^<arg>.{<param> <> type} <pa> ^<arg>.type.world.object <atr>)
   (<c> ^<arg> <conda>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-parameter
        ^category svs
        ^arg <arg>
        ^atr <atr>
        ^objd <objd>
        ^param <param>
#        ^found-prep <fprep>
        ^cond <conda>)
   (<objd> ^word object)
}

#sp {find-action*propose*check-valid-parameter
#   (state <s> ^name find-action
#              ^found-prep <fprep>
#             -^valid-arg.<arg> <obj>
#             -^invalid-arg.<arg> <obj>
#              ^game.actions.action <a>)
#   (<a> ^parameters <p> ^conditions <c>)
#   (<s> ^option.<arg> <obj>)
#   (<c> ^<arg> <conda>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name check-valid-parameter
#        ^category svs
#        ^arg <arg>
#        ^obj <obj>
#        ^found-prep <fprep>
#        ^objd <objd>
#        ^cond <conda>)
#}

sp {find-action*propose*complete-find-action
   (state <s> ^name find-action
              ^game.actions.action <a>          
              ^found-prep.predicate <p1>
              ^valid-arg <va>
              ^valid-arg <vb>)
   (<va> ^1 <o1>)
   (<vb> ^2 <o2>)
   (<a> ^parameters <p>)
#   (<s> ^option <oa> ^option <ob>)
#   (<oa> ^1 <o1>)
#   (<ob> ^2 <o2>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete-find-action
        ^category svs
        ^action <a>
        ^predicate <p1>
        ^obja <o1> 
        ^objb <o2>)
}

sp {find-action*apply*complete-find-action
   (state <s> ^name find-action
              ^operator <o>
              ^superstate <ss>
              ^game.actions.action <a>)
   (<o> ^name complete-find-action
        ^obja <o1>
        ^objb <o2>
        ^predicate <p>
        ^action <a>)
-->
   (<ss> ^action <a>
         ^predicate <p>
         ^obj1 <o1>
         ^obj2 <o2>)
}



#check-legality of action TODO
#sp {find-action*find-legal-actions
#   (state <s> ^name find-action
#              ^game.actions.action <a>
#              ^game.facts.equivalences <eq>
#              ^topstate.prepositions <prep>
#              ^game-name <game>)
#   (<a> ^parameters.option.<arg> <o>)
#   (<a> ^conditions <c>)
#   (<c> ^<arg>.{<param> <> type} <pa> ^<arg>.type.world.<thing> <atr>)
#   (<eq> ^equivalence <eq1>)
#   (<eq1> ^a.parameter <param>
#          ^b.world <thing>)
#   (<prep> ^<atr> <param>)
#-->
#   (<p> ^option.<arg> <o>)
#}





# a block
sp {apply*push-object-message*action-parameter-message
   (state <s> ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type parameter)
   (<o> ^name push-object-message
        ^message <msg>
        ^object <obj>)
   (<obj> ^specifier INDEF
          ^word <type>)
-->
   (<msg> ^purpose <p>)
   (<p> ^type action-parameter-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type>)
   (<sat> ^dialog-event.type game)
}

sp {action-parameter-message*propose*learn-parameter
   (state <s> ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>)
   (<p> ^type action-parameter-message
        ^parameters.parameter <type>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-parameter
        ^category svs
	    ^parameter <type>)
}

############################## the block is blue
sp {apply*push-object-message*parameter-condition-message
   (state <s> ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition ^parameter <type>)
   (<o> ^name push-object-message
        ^message <msg>
       -^relation
        ^object <obj>)
   (<obj> ^specifier DEF
          ^word {<cond> <> <type>}
          ^word <type>)
-->
   (<msg> ^purpose <p>)
   (<p> ^type parameter-condition-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition <cond>)
   (<sat> ^dialog-event.type game)
}

sp {parameter-condition-message*propose*learn-condition
   (state <s> ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>)
   (<p> ^type parameter-condition-message
        ^parameters <param>)
   (<param> ^parameter <type> ^condition <cond>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-condition
        ^category svs
        ^prep none
        ^spec none
        ^negative false
        ^condition <cond>
	    ^parameter <type>)
}


### the block is in a location
###TODO: fix positive/negative NULL parse hack :(
sp {apply*push-object-message*parameter-condition-message*relation*positive
   (state <s> ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition ^parameter <type>)
   (<o> ^name push-object-message
        ^message <msg>
        ^relation.word <prep>
        ^object <obj>
        ^relation.p2.object {<obj1> <> <obj>})
   (<obj> ^specifier DEF
          ^word <type>)
   (<obj1> ^specifier {<spec> << INDEF DEF >>}
          -^word null
           ^word <cond>)
-->
   (<msg> ^purpose <p>)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition <cond> ^prep <prep> ^spec <spec> ^negative false)
   (<sat> ^dialog-event.type game)
}

sp {apply*push-object-message*parameter-condition-message*relation*negative
   (state <s> ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition ^parameter <type>)
   (<o> ^name push-object-message
        ^message <msg>
        ^relation.word <prep>
        ^object <obj>
        ^relation.p2.object {<obj1> <> <obj>})
   (<obj> ^specifier DEF
          ^word <type>)
   (<obj1> ^specifier {<spec> << INDEF DEF >>}
           ^word null
           ^word {<cond> <> null})
-->
   (<msg> ^purpose <p>)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition <cond> ^prep <prep> ^spec <spec> ^negative true)
   (<sat> ^dialog-event.type game)
}

sp {parameter-condition-message-relation*propose*learn-condition
   (state <s> ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>)
   (<p> ^type parameter-condition-message-relation
        ^parameters <param>)
   (<param> ^parameter <type> ^condition <cond> ^prep <prep> ^spec <spec> ^negative <val>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-condition
        ^category svs
        ^prep <prep>
        ^spec <spec>
        ^negative <val>
        ^condition <cond>
	    ^parameter <type>)
}

############################## place
sp {apply*push-object-message*action-name-message
   (state <s> ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type action)
   (<o> ^name push-single-word-response
        ^message <msg>
        ^response {<name> <> finished})
-->
   (<msg> ^purpose <p>)
   (<p> ^type action-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^action-name <name>)
   (<sat> ^dialog-event.type game)
}

sp {action-name-message*propose*learn-action
   (state <s> ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>)
   (<p> ^type action-name-message
        ^parameters <param>)
   (<param> ^action-name <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-action
        ^action-name <name>
        ^category svs)
}

##finished conditions for parameter
sp {apply*push-object-message*conditions-finished-message
   (state <s> ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type {<cond> << condition >>} ^arg <arg> ^parameter <type>)
   (<o> ^name push-single-word-response
        ^message <msg>
        ^response finished)
-->
#   (<l> ^type <cond> -)
#   (<l> ^arg <arg> -)
#   (<l> ^parameter <type> -)
#   (<l> ^type parameter ^arg (+ 1 <arg>))
   (<msg> ^purpose <p>)
   (<p> ^type conditions-finished-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type>)
   (<sat> ^dialog-event.type game)
}

sp {conditions-finished-message*propose*finish-conditions
   (state <s> ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>)
   (<p> ^type conditions-finished-message
        ^parameters <param>)
   (<param> ^parameter <type>)
-->
   (<s> ^operator <o> +)
   (<o> ^name finish-conditions
        ^parameter <type>
        ^category svs)
}




##finished conditions for parameter
sp {apply*push-object-message*parameters-finished-message
   (state <s> ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type parameter ^arg <arg>)
   (<o> ^name push-single-word-response
        ^message <msg>
        ^response finished)
-->
   (<msg> ^purpose <p>)
   (<p> ^type parameters-finished-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^dialog-event.type game)
}

sp {parameters-finished-message*propose*finish-parameters
   (state <s> ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>)
   (<p> ^type parameters-finished-message
        ^parameters <param>)
-->
   (<s> ^operator <o> +)
   (<o> ^name finish-parameters
        ^parameter <type>
        ^category svs)
}

#sp {action-parameter-message*propose*learn-parameter
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type action-parameter-message
#        ^parameters.parameter <type>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-parameter
#        ^category svs
#	    ^parameter <type>)
#}

##############################
#todo use current interaction stack
#todo finished and HAHA doing this now
# verb name handling 
#todo what does clear mean or blue mean

sp {apply*push-object-message*game-turn-message
   (state <s> ^operator <o>)
   (<o> ^name push-object-message
        ^message <msg>
        ^object.word turn)
-->
   (<msg> ^purpose <p>)
   (<p> ^type game-turn-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^action-event.type turn)
}

sp {game-turn-message*propose*start-turn
   (state <s> ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>)
   (<p> ^type game-turn-message)
-->
   (<s> ^operator <o> +)
   (<o> ^name start-turn
        ^category svs)
}

##################################
sp {apply*push-object-message*game-start-message
   (state <s> ^operator <o>)
   (<o> ^name push-object-message
        ^message <msg>
        ^object.word {<game-name> <> game}
        ^object.word game)
-->
   (<msg> ^purpose <p>)
   (<p> ^type game-start-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^game-name <game-name>)
   (<sat> ^dialog-event.type game)
}

sp {game-start-message*propose*game-start
   (state <s> ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>)
   (<p> ^type game-start-message
        ^parameters.game-name <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name game-start
        ^category svs
	    ^game-name <name>)
}

##############################
sp {apply*push-object-message*game-initiate-message
   (state <s> ^operator <o>)
   (<o> ^name push-single-word-response
        ^message <msg>
        ^response start)
-->
   (<msg> ^purpose <p>)
   (<p> ^type game-initiate-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^dialog-event.type game)
}

sp {game-start-message*propose*game-initiate
   (state <s> ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>)
   (<p> ^type game-initiate-message)
-->
   (<s> ^operator <o> +)
   (<o> ^name game-initiate
        ^category svs)
}

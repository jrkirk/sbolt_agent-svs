#### set learning
smem --set learning on
### requires new SMem
#smem --set activation-mode maximal-constraint 

#### set episodic learning on
epmem --set learning on
epmem --set trigger dc
#epmem --set database file
#epmem --set path /home/shiwali/BOLT/bolt.db
epmem --set phase output


#### set chunking paramenter
learn --only


##### source all relevant files
pushd ./topchef-soar
source all_source.soar
popd

pushd ./explanation
source all_source.soar
popd

pushd ./verb-execution
source all_source.soar
popd

pushd ./interaction
source all_source.soar
popd

pushd ./indexing
source all_source.soar
popd

pushd message-interpretation
source message-interpretation_source.soar
popd

### source objects code
pushd ./objects
source objects_source.soar
popd

### source spatial-rel code
pushd ./svs
source svs_source.soar
popd

### source all the selection rules
pushd ./default
source selection.soar
popd

source default.soar
source preferences.soar
##source chunking.soar


sp {propose*init-agent
   (state <s> -^name
   	      ^superstate nil)
-->
   (<s> ^operator <op> + >)
   (<op> ^name init-agent)
}

sp {apply*init-agent
   (state <s> ^operator.name init-agent)
-->
   (<s> ^topstate <s>
        ^name bolt-agent)
}

## Elaborate a state as non-atomic/atomic if the operator proposed in superstate in non-atomic/atomic

sp {elaborate*atomicity
   (state <s> ^superstate.operator <sop>)
   (<sop> ^kind <atom>)
-->
   (<s> ^kind <atom>)
}



## The wait operator which gets selected when an action is executing 
sp {non-atomic*propose*wait
    (state <s> ^choices none ^kind non-atomic
               ^io.input-link.time.steps <t>) 
# AM: Changed to give enough time to apply the waiting rule
    -->
    (<s> ^operator <q> +)
    (<q> ^name wait +)
}

# AM: added to let the chat window whether the agent is idle
sp {apply*wait*output-link*waiting
   (state <s> ^operator <o>
              ^io.input-link.time.steps <t>
              ^io.output-link <ol>)
   (<o> ^name wait)
-->
   (<ol> ^waiting <t>)
}

sp {apply*operator*remove*old*waiting
   (state <s> ^operator <o>
              ^io.input-link.time.steps <t>
              ^io.output-link <ol>)
   (<ol> ^waiting {<old-t> < <t>})
-->
   (<ol> ^waiting <old-t> -)
}



sp {non-atomic*prefer*wait*primitive-actions
   (state <s> ^operator <op1> +
   	      ^operator <op2> +)
   (<op1> ^name wait)
   (<op2> ^category primitive-action)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {non-atomic*prefer*svs*wait
   (state <s> ^operator <op1> +
   	      ^operator <op2> +)
   (<op1> ^name wait)
   (<op2> ^category svs)
-->
   (<s> ^operator <op2> > <op1>)
}


### learn in the selection space
sp {chunk*in*selection*space	
   (state <s> ^name selection
   	      ^learning-operator <any>)
-->
   (force-learn <s>)
}


### copy topstate to top-state
sp {copy*topstate*top-state
   (state <s> ^topstate <ts>)
-->
   (<s> ^top-state <ts>)
}


### elaborate problem space for lgsoar operator
# sp {elaborate*problem-space*lgsoar
#    (state <s> ^name preprocess-sentence)
# -->
#    (<s> ^problem-space lgsoar)
# }
   
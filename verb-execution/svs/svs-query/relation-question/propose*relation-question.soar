#find ids for both objects then process in svs
#sp {relation-question*propose*find-object
#   (state <s> ^topstate <s>
#              ^interaction.stack.segment.purpose <p>
#              -^obj1)
#   (<p> ^type relation-question
#        ^parameters.object2 <obj2>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name find-object
#        ^category svs
#        ^obj 2)
#}

#find ids for both objects then process in svs
sp {relation-question*propose*index-object
   (state <s> ^topstate <s>
              ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>
         -^info.obj2)
   (<p> ^type relation-question
        ^parameters.object2 <obj2>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-object
        ^use-interaction true
		^allow-ties true
        ^obj 2
        ^category object-processing
	    ^object <obj2>)
}


#sp {relation-question*find-object2*elaborate*word
#   (state <s> ^operator <o> +
#              ^interaction.stack.segment.purpose <p>)
#   (<p> ^type relation-question
#        ^parameters.object2.word {<word> <> object })
#   (<o> ^name find-object
#        ^obj 2)
#-->
#   (<o> ^word <word>)
#}

#sp {relation-question*apply*find-object2*results
#   (state <s> ^operator <o>
#              ^interaction.stack.segment.purpose.type relation-question)
#   (<o> ^name find-object
#        ^obj 2
#        ^match.id <id>)
#-->
#   (<s> ^obj2 <id>)
#}

sp {relation-question*apply*index-object*results
   (state <s> ^operator <o>
              ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>
          ^info <i>)
   (<p> ^type relation-question)
   (<o> ^name index-object
        ^obj 2
        ^match.id <id>)
-->
   (<i> ^obj2 <id>)
}

#sp {relation-question*apply*find-object2*failure
#   (state <s> ^operator <o>
#              ^interaction.stack.segment.purpose.type relation-question
#              ^io.output-link <out>
#              ^topstate.status <status>)
#   (<o> ^name find-object
#        ^obj 2
#        ^match failure)              
#-->
#   (<out> ^send-message <msg>)
#   (<msg> ^type no-object
#          ^fields.object failure)
#   (<status> ^performed.action-event describe)
#}

sp {relation-question*apply*index-object*failure
   (state <s> ^operator <o>
              ^interaction.stack.segment.purpose.type relation-question
              ^io.output-link <out>
              ^topstate.status <status>)
   (<o> ^name index-object
        ^obj 2
        ^match failure)              
-->
   (<out> ^send-message <msg>)
   (<msg> ^type no-object
          ^fields.object failure)
   (<status> ^performed.action-event describe)
}

sp {relation-question*propose*process-svs-question
   (state <s> -^processed
               ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>
          ^info.obj2 <id2>)
   (<p> ^type relation-question
       -^parameters.project
        ^parameters.prep <prep>)
-->
   (<s> ^operator <o> +)
   (<o> ^name process-svs-question
        ^category svs
	    ^message <m>)
   (<m> ^fields <f> ^type svs-query)
   (<f> ^objects <object>)
   (<object> ^obj <obja>
             ^type <prep>)
   (<obja> ^id <id2> ^index 2)
}

sp {relation-question*propose*process-svs-projection
   (state <s> -^processed
               ^interaction.stack.segment <seg>)
   (<seg> ^purpose <p>
          ^info.obj2 <id2>)
   (<p> ^type relation-question
        ^parameters.project
        ^parameters.prep <prep>)
-->
   (<s> ^operator <o> +)
   (<o> ^name process-svs-projection
        ^category svs
	    ^message <m>)
   (<m> ^fields <f> ^type svs-project)
   (<f> ^objects <object>)
   (<object> ^obj <obja>
             ^type <prep>)
   (<obja> ^id <id2> ^index 2)
}



sp {find-projection*project*svs*propose*lookup-preposition
   (state <s> ^name find-projection
             -^found-prep
              ^a <ida>
              ^b <idb>
              ^result <res>
              ^prep <type>)
-->
   (<s> ^operator <o> +)
   (<o> ^name lookup-preposition
        ^category svs
        ^type <type>)
}

sp {find-projection*project*svs*failure*prep-exist*after-interaction
   (state <s> ^name find-projection
              ^superstate <ss>
              ^a <ida>
              ^b <idb>
              ^result <res>
              ^interaction true
              ^topstate.interaction.stack.segment.info.status.no-teaching true
              ^prep <prep>)
   (<s> ^stat default)
-->
   (<ss> ^projection-result failure
         ^proj-failure-reason no-prep)
}

sp {find-projection*project*svs*failure*prep-exist
   (state <s> ^name find-projection
              ^superstate <ss>
              ^a <ida>
              ^b <idb>
              ^result <res>
             -^interaction true
              ^prep <prep>)
   (<s> ^stat default)
-->
   (<ss> ^projection-result failure
         ^proj-failure-reason no-prep)
}

sp {find-projection*project*svs*failure*obja-exist
   (state <s> ^name find-projection
              ^superstate <ss>
              ^a <ida>
              ^result <res>
              ^topstate.svs.spatial-scene <sp>)
   (<sp> -^child.id-int <ida>)
-->
   (<ss> ^projection-result failure
         ^proj-failure-reason no-object)
}
sp {find-projection*project*svs*failure*objb-exist
   (state <s> ^name find-projection
              ^superstate <ss>
              ^b <idb>
              ^result <res>
              ^topstate.svs.spatial-scene <sp>)
   (<sp> -^child.id-int <idb>)
-->
   (<ss> ^projection-result failure
         ^proj-failure-reason no-object)
}

sp {find-projection*project*svs*create-projection
   (state <s> ^name find-projection
              ^a <ida>
              ^b <idb>
              ^prep <prep>
              ^result <res>
              ^predicate <p1>
              ^topstate.svs.command <cmd>
              ^topstate.svs.spatial-scene <sp>)
   (<sp> ^child <c1> ^child <c2>)
   (<c1> ^id-int <ida> ^id <obja>)
   (<c2> ^id-int <idb> ^id <objb>)
-->
   (<cmd> ^project <P11>)
   (<P11> ^a <N7> ^b <N8>)
   (<N7> ^type node ^name <obja>)
   (<N8> ^type node ^name <objb>)
}

sp {find-projection*project*svs*create-projection*add-primitives
   (state <s> ^name find-projection
              ^a <ida>
              ^b <idb>
              ^prep <prep>
              ^result <res>
              ^topstate.svs.command <cmd>
              ^predicate <p1>
              ^topstate.svs.spatial-scene <sp>)
   (<p1> ^name <prep>
         ^relation.type <ptype>)
   (<sp> ^child <c1> ^child <c2>)
   (<c1> ^id-int <ida> ^id <obja>)
   (<c2> ^id-int <idb> ^id <objb>)
   (<cmd> ^project <P11>)
   (<P11> ^a <N7> ^b <N8>)
   (<N7> ^type node ^name <obja>)
   (<N8> ^type node ^name <objb>)
-->
   (<P11> ^type <ptype>)
}

sp {find-projection*project*svs*complete-projection
   (state <s> ^name find-projection
              ^a <ida>
              ^b <idb>
              ^prep <prep>
              ^result <res>
              ^superstate <ss>
              ^topstate.svs.command <cmd>)
   (<cmd> ^project <P11>)
   (<P11> ^a <N7> ^b <N8> ^result <r>)
   (<r> ^x <x> ^y <y> ^z <z>)
-->
   (<ss> ^projection-result <result>)
   (<result> ^x <x> ^y <y> ^z <z>)
}
